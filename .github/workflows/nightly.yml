name: Nightly Build

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  nightly-build:
    name: Nightly Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: goldbull-nightly-linux-amd64
            
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: goldbull-nightly-windows-amd64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build all packages
      run: |
        cargo build --release --target ${{ matrix.target }} --package goldbull-core
        cargo build --release --target ${{ matrix.target }} --package goldbull-tokenizer
        cargo build --release --target ${{ matrix.target }} --bin goldbull-text-train || echo "goldbull-text-train build failed"
        cargo build --release --target ${{ matrix.target }} --bin goldbull-code-train || echo "goldbull-code-train build failed"
        cargo build --release --target ${{ matrix.target }} --bin goldbull-brief-train || echo "goldbull-brief-train build failed"
        cargo build --release --target ${{ matrix.target }} --bin goldbull-vision-train || echo "goldbull-vision-train build failed"
        cargo build --release --target ${{ matrix.target }} --bin goldbull-sage-train || echo "goldbull-sage-train build failed"
        cargo build --release --target ${{ matrix.target }} --bin goldbull-embedding-train || echo "goldbull-embedding-train build failed"
        cargo build --release --target ${{ matrix.target }} --bin goldbull-multimodel-train || echo "goldbull-multimodel-train build failed"
        cargo build --release --target ${{ matrix.target }} --bin goldbull-onnx-converter || echo "goldbull-onnx-converter build failed"

    - name: Run tests
      run: |
        cargo test --target ${{ matrix.target }} --package goldbull-core
        cargo test --target ${{ matrix.target }} --package goldbull-tokenizer
        cargo test --target ${{ matrix.target }} --package goldbull-text || echo "goldbull-text tests failed"
        cargo test --target ${{ matrix.target }} --package goldbull-brief || echo "goldbull-brief tests failed"
        cargo test --target ${{ matrix.target }} --package goldbull-vision || echo "goldbull-vision tests failed"
        cargo test --target ${{ matrix.target }} --package goldbull-sage || echo "goldbull-sage tests failed"
        cargo test --target ${{ matrix.target }} --package goldbull-embedding || echo "goldbull-embedding tests failed"
        cargo test --target ${{ matrix.target }} --package goldbull-multimodel || echo "goldbull-multimodel tests failed"
        cargo test --target ${{ matrix.target }} --package goldbull-code || echo "goldbull-code tests failed"

    - name: Prepare nightly artifacts
      shell: bash
      run: |
        mkdir -p nightly-artifacts
        
    - name: Copy binaries (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        # Copy training binaries if they exist
        if [ -f "target/${{ matrix.target }}/release/goldbull-text-train" ]; then
          cp "target/${{ matrix.target }}/release/goldbull-text-train" nightly-artifacts/
        fi
        if [ -f "target/${{ matrix.target }}/release/goldbull-code-train" ]; then
          cp "target/${{ matrix.target }}/release/goldbull-code-train" nightly-artifacts/
        fi
        if [ -f "target/${{ matrix.target }}/release/goldbull-sage-train" ]; then
          cp "target/${{ matrix.target }}/release/goldbull-sage-train" nightly-artifacts/
        fi
        if [ -f "target/${{ matrix.target }}/release/goldbull-onnx-converter" ]; then
          cp "target/${{ matrix.target }}/release/goldbull-onnx-converter" nightly-artifacts/
        fi
        
    - name: Copy binaries (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        # Copy training binaries if they exist
        if [ -f "target/${{ matrix.target }}/release/goldbull-text-train.exe" ]; then
          cp "target/${{ matrix.target }}/release/goldbull-text-train.exe" nightly-artifacts/
        fi
        if [ -f "target/${{ matrix.target }}/release/goldbull-code-train.exe" ]; then
          cp "target/${{ matrix.target }}/release/goldbull-code-train.exe" nightly-artifacts/
        fi
        if [ -f "target/${{ matrix.target }}/release/goldbull-sage-train.exe" ]; then
          cp "target/${{ matrix.target }}/release/goldbull-sage-train.exe" nightly-artifacts/
        fi
        if [ -f "target/${{ matrix.target }}/release/goldbull-onnx-converter.exe" ]; then
          cp "target/${{ matrix.target }}/release/goldbull-onnx-converter.exe" nightly-artifacts/
        fi

    - name: Upload nightly artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.artifact_name }}
        path: nightly-artifacts/
        retention-days: 7